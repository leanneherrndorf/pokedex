{"version":3,"sources":["components/Card.js","components/List.js","Pokemon.js","components/PokeData.js","components/App.js","serviceWorker.js","index.js"],"names":["ListItem","styled","div","_templateObject","Card","_this","this","react_default","a","createElement","onClick","props","findPokemon","item","entry_number","pokemon_species","name","Component","List","className","Object","keys","items","map","key","components_Card","Pokemon","data","classCallCheck","id","height","baseExperience","base_experience","sprite","sprites","front_default","abilities","pokemon","alt","src","ability","App","possibleConstructorReturn","getPrototypeOf","call","getPokemonList","fetch","then","result","json","setState","pokemon_entries","catch","error","console","log","componentDidMount","concat","detailView","state","components_List","PokeData","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","components_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b3636205.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components'\n\nconst ListItem = styled.div`\n\tborder-bottom: 1px solid grey;\n\tpadding: 10px;\n\tcursor: pointer;\n\t\n\t&:hover {\n\t\tbackground: #fdf8cf;\n\t}\n`;\n\n\nclass Card extends Component {\n\trender() {\n\t\treturn <ListItem onClick={() => this.props.findPokemon(this.props.item.entry_number)}><div>\n\t\t\t<div>{this.props.item.pokemon_species.name}</div>\n\t\t</div></ListItem>;\n\t}\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport Card from './Card'\n\nclass List extends Component {\n\trender() {\n\t\treturn <div className=\"list\">\n\t\t\t{ Object.keys(this.props.items).map((key) =>\n\t\t\t\t<Card key={key} item={this.props.items[key]} findPokemon={this.props.findPokemon}></Card>\n\t\t\t)}\n\t\t</div>;\n\t}\n}\n\nexport default List;","class Pokemon {\n\tconstructor(data) {\n\t\tthis.id = data.id;\n\t\tthis.name = data.name;\n\t\tthis.height = data.height;\n\t\tthis.baseExperience = data.base_experience;\n\t\tthis.sprite = data.sprites.front_default;\n\t\tthis.abilities = data.abilities;\n\t}\n}\n\nexport default Pokemon;","import React, { Component } from 'react';\n\nclass Card extends Component {\n\trender() {\n\t\treturn <div className=\"details\">\n\t\t\t<h2>{this.props.pokemon.name}</h2>\n\t\t\t<img alt= \"\" src={this.props.pokemon.sprite} />\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Base Experience: </td>\n\t\t\t\t\t\t<td>{this.props.pokemon.baseExperience}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Height: </td>\n\t\t\t\t\t\t<td>{this.props.pokemon.height}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td className=\"abilities\">Abilities</td>\n\t\t\t\t\t\t{ Object.keys(this.props.pokemon.abilities).map((key) =>\n\t\t\t\t\t\t\t<td key={key}>+ {this.props.pokemon.abilities[key].ability.name}</td>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>;\n\t}\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport List from './List';\nimport Pokemon from '../Pokemon'\nimport PokeData from './PokeData'\nimport '../style/App.css';\n\nclass App extends Component {\n\tgetPokemonList = () => {\n\t\tfetch(`https://pokeapi.co/api/v2/pokedex/2/`)\n\t\t\t.then(result => result.json())\n\t\t\t.then(data => {\n\t\t\t\tthis.setState({ items: data.pokemon_entries})\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.log(error)\n\t\t\t})\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\titems: [],\n\t\t\tpokemon: '',\n\t\t\tdetailView: false\n\t\t};\n\t}\n\n\tcomponentDidMount = () => {\n\t\tthis.getPokemonList()\n\t}\n\n\tfindPokemon = (id) => {\n\t\tfetch(`https://pokeapi.co/api/v2/pokemon/${id}/`)\n\t\t\t.then(result => result.json())\n\t\t\t.then(data => {\n\t\t\t\tconsole.log(data)\n\t\t\t\tconst pokemon = new Pokemon(data);\n\t\t\t\tthis.setState({pokemon: pokemon});\n\t\t\t\tthis.setState({detailView: true});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.log(error)\n\t\t\t})\n\t};\n\n\n  render() {\n\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>Pokemon Pokedex</h1>\n\t\t\t\t\t<List items={this.state.items} findPokemon={this.findPokemon}/>\n\t\t\t\t\t{this.state.detailView && <PokeData pokemon={this.state.pokemon}/>}\n\t\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();"],"sourceRoot":""}